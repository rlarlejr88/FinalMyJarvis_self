package kr.or.iei.meeting.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import kr.or.iei.common.model.dto.ResponseDTO;
import kr.or.iei.meeting.model.dto.Meeting;
import kr.or.iei.meeting.model.service.MeetingService;

@RestController
@CrossOrigin("*")
@RequestMapping("/api/meetings")
public class MeetingController {
    @Autowired
    private MeetingService service;

    // 회의록 등록
    @PostMapping
    public ResponseEntity<ResponseDTO> insertMeeting(ModelAttribute Meeting meeting,  @RequestParam(value="file", required=false) MultipartFile file) {
        int result = service.insertMeeting(meeting);
        if(result > 0) {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK, "회의록 등록 완료", true, null));
        } else {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.INTERNAL_SERVER_ERROR, "등록 실패", false, null));
        }
    }

    // 회의록 전체 조회
    @GetMapping
    public ResponseEntity<ResponseDTO> getAllMeetings() {
        List<Meeting> meetings = service.getAllMeetings();
        return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK, "회의록 목록 조회", meetings, "success"));
    }

    // 회의록 수정
    @PutMapping
    public ResponseEntity<ResponseDTO> updateMeeting(@RequestBody Meeting meeting) {
        int result = service.updateMeeting(meeting);
        if(result > 0) {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK, "회의록 수정 완료", true, null));
        } else {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.INTERNAL_SERVER_ERROR, "수정 실패", false, null));
        }
    }

    // 회의록 삭제
    @DeleteMapping("/{meetingNo}")
    public ResponseEntity<ResponseDTO> deleteMeeting(@PathVariable String meetingNo) {
        int result = service.deleteMeeting(meetingNo);
        if(result > 0) {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK, "회의록 삭제 완료", true, null));
        } else {
            return ResponseEntity.ok(new ResponseDTO(HttpStatus.INTERNAL_SERVER_ERROR, "삭제 실패", false, null));
        }
    }
}